import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { ChevronLeft, ChevronRight, Check, ArrowRight, Brain, XCircle, Award, RefreshCw } from "lucide-react";

const generateQuizQuestions = (count = 5) => {
  // In a real app, these would be generated by an AI based on user preferences
  // Here we'll simulate that with pre-defined questions and randomize them
  const allQuestions = [
    {
      id: 1,
      question: "Which nutrient is essential for a dog's bone development?",
      options: [
        { text: "Fiber", value: "fiber", correct: false },
        { text: "Calcium", value: "calcium", correct: true },
        { text: "Vitamin C", value: "vitamin_c", correct: false },
        { text: "Iron", value: "iron", correct: false }
      ]
    },
    {
      id: 2,
      question: "How often should adult dogs typically be fed each day?",
      options: [
        { text: "Once", value: "once", correct: false },
        { text: "Twice", value: "twice", correct: true },
        { text: "Three times", value: "three", correct: false },
        { text: "Four times", value: "four", correct: false }
      ]
    },
    {
      id: 3,
      question: "Which of these is a sign of dehydration in pets?",
      options: [
        { text: "Watery eyes", value: "watery_eyes", correct: false },
        { text: "Cold nose", value: "cold_nose", correct: false },
        { text: "Dry gums", value: "dry_gums", correct: true },
        { text: "Frequent sneezing", value: "sneezing", correct: false }
      ]
    },
    {
      id: 4,
      question: "What is the normal body temperature range for a dog?",
      options: [
        { text: "97-99°F (36.1-37.2°C)", value: "97_99", correct: false },
        { text: "100-102.5°F (37.8-39.2°C)", value: "100_102", correct: true },
        { text: "103-105°F (39.4-40.6°C)", value: "103_105", correct: false },
        { text: "96-98°F (35.6-36.7°C)", value: "96_98", correct: false }
      ]
    },
    {
      id: 5,
      question: "Which of the following is toxic to cats?",
      options: [
        { text: "Catnip", value: "catnip", correct: false },
        { text: "Cucumber", value: "cucumber", correct: false },
        { text: "Lilies", value: "lilies", correct: true },
        { text: "Carrots", value: "carrots", correct: false }
      ]
    },
    {
      id: 6,
      question: "How often should you brush a long-haired dog?",
      options: [
        { text: "Once a month", value: "monthly", correct: false },
        { text: "Once a week", value: "weekly", correct: false },
        { text: "Every other day", value: "every_other", correct: false },
        { text: "Daily", value: "daily", correct: true }
      ]
    },
    {
      id: 7,
      question: "What is the recommended minimum daily exercise for an adult dog?",
      options: [
        { text: "15 minutes", value: "15min", correct: false },
        { text: "30 minutes", value: "30min", correct: true },
        { text: "60 minutes", value: "60min", correct: false },
        { text: "90 minutes", value: "90min", correct: false }
      ]
    },
    {
      id: 8,
      question: "When training a puppy, what is the best approach?",
      options: [
        { text: "Punishment for bad behavior", value: "punish", correct: false },
        { text: "Immediate reward for good behavior", value: "reward", correct: true },
        { text: "Loud verbal commands", value: "loud", correct: false },
        { text: "Physical restraint", value: "restraint", correct: false }
      ]
    }
  ];
  
  // Shuffle and select questions
  return [...allQuestions]
    .sort(() => 0.5 - Math.random())
    .slice(0, count)
    .map((q, index) => ({ ...q, id: index + 1 }));
};

const QuizPage = () => {
  const navigate = useNavigate();
  const [quizQuestions, setQuizQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [quizComplete, setQuizComplete] = useState(false);
  const [score, setScore] = useState(0);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [loading, setLoading] = useState(true);
  
  const [feedback, setFeedback] = useState<{
    message: string;
    isCorrect: boolean;
  } | null>(null);

  useEffect(() => {
    // Simulate loading time for AI generated quiz
    const timer = setTimeout(() => {
      const questions = generateQuizQuestions();
      setQuizQuestions(questions);
      setLoading(false);
    }, 1500);
    
    return () => clearTimeout(timer);
  }, []);
  
  const startNewQuiz = () => {
    setLoading(true);
    setCurrentQuestion(0);
    setAnswers({});
    setSelectedOption(null);
    setQuizComplete(false);
    setScore(0);
    setCorrectAnswers(0);
    
    const timer = setTimeout(() => {
      const questions = generateQuizQuestions();
      setQuizQuestions(questions);
      setLoading(false);
    }, 1500);
    
    return () => clearTimeout(timer);
  };
  
  if (loading) {
    return (
      <div className="min-h-screen py-8 px-4">
        <div className="max-w-lg mx-auto flex flex-col items-center justify-center h-96">
          <div className="animate-pulse flex flex-col items-center">
            <div className="rounded-full bg-primary/30 p-6">
              <Brain className="h-12 w-12 text-primary animate-bounce" />
            </div>
            <h2 className="text-xl font-bold mt-6">Generating Your Quiz...</h2>
            <p className="text-muted-foreground mt-2 text-center">
              Our AI is preparing personalized questions about pet care and knowledge.
            </p>
          </div>
        </div>
      </div>
    );
  }
  
  if (quizQuestions.length === 0) {
    return (
      <div className="min-h-screen py-8 px-4">
        <div className="max-w-lg mx-auto flex flex-col items-center justify-center h-96">
          <XCircle className="h-12 w-12 text-destructive" />
          <h2 className="text-xl font-bold mt-4">Something went wrong</h2>
          <p className="text-muted-foreground mt-2 text-center mb-4">
            We couldn't generate quiz questions at the moment.
          </p>
          <Button onClick={() => navigate("/")}>Back to Home</Button>
        </div>
      </div>
    );
  }
  
  const question = quizQuestions[currentQuestion];
  const progress = ((currentQuestion) / quizQuestions.length) * 100;
  
  const handleOptionSelect = (value: string) => {
    setSelectedOption(value);
    setAnswers({ ...answers, [question.id]: value });
    
    // Check if answer is correct and provide feedback
    const selectedOption = question.options.find(option => option.value === value);
    if (selectedOption) {
      const isCorrect = selectedOption.correct;
      let message = "";
      
      if (isCorrect) {
        const positiveMessages = [
          "Excellent! You've got it right!",
          "Perfect answer! Keep it up!",
          "Wonderful! You really know your stuff!",
          "Outstanding! That's exactly right!",
          "Fantastic job! You're doing great!"
        ];
        message = positiveMessages[Math.floor(Math.random() * positiveMessages.length)];
      } else {
        const correctAnswer = question.options.find(opt => opt.correct)?.text;
        const encouragingMessages = [
          `Not quite. The correct answer is: ${correctAnswer}`,
          `Good try! But the right answer is: ${correctAnswer}`,
          `Keep learning! The correct answer is: ${correctAnswer}`,
          `Almost there! The right answer is: ${correctAnswer}`,
          `Nice attempt! The correct answer is: ${correctAnswer}`
        ];
        message = encouragingMessages[Math.floor(Math.random() * encouragingMessages.length)];
      }
      
      setFeedback({ message, isCorrect });
    }
  };

  const handleNext = () => {
    // Check if current answer is correct before moving on
    const currentAnswer = answers[question.id];
    const currentOption = question.options.find(option => option.value === currentAnswer);
    
    if (currentOption && currentOption.correct) {
      setCorrectAnswers(prev => prev + 1);
    }
    
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedOption(answers[quizQuestions[currentQuestion + 1].id] || null);
    } else {
      const finalScore = Math.round((correctAnswers + (currentOption?.correct ? 1 : 0)) / quizQuestions.length * 100);
      setScore(finalScore);
      setQuizComplete(true);
    }
  };
  
  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setSelectedOption(answers[quizQuestions[currentQuestion - 1].id] || null);
    }
  };
  
  const handleSubmit = () => {
    // In a real app, we would process the answers here
    // For now, we'll just navigate back to the home page
    navigate("/home");
  };
  
  return (
    <div className="min-h-screen py-8 px-4">
      <div className="max-w-lg mx-auto space-y-6">
        <div>
          <h1 className="text-2xl font-bold text-center mb-2">Pet Care Quiz</h1>
          <p className="text-center text-muted-foreground">Test your pet care knowledge</p>
        </div>
        
        <div className="flex items-center space-x-2 text-sm">
          <span className="text-muted-foreground">Progress</span>
          <Progress value={progress} className="flex-1 h-2" />
          <span className="text-muted-foreground">{Math.round(progress)}%</span>
        </div>
        
        {!quizComplete ? (
          <Card className="border-primary/10">
            <CardHeader>
              <CardTitle className="text-xl text-center">{question.question}</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {question.options.map((option) => (
                <div 
                  key={option.value}
                  className={`
                    p-4 rounded-lg border-2 transition-all cursor-pointer flex justify-between items-center
                    ${selectedOption === option.value 
                      ? option.correct 
                        ? 'border-green-500 bg-green-50' 
                        : 'border-red-500 bg-red-50'
                      : 'border-muted hover:border-primary/30'}
                    ${selectedOption && option.correct && 'border-green-500 bg-green-50'}
                  `}
                  onClick={() => !selectedOption && handleOptionSelect(option.value)}
                >
                  <span>{option.text}</span>
                  {selectedOption === option.value && (
                    <div className={`h-5 w-5 rounded-full ${option.correct ? 'bg-green-500' : 'bg-red-500'} flex items-center justify-center`}>
                      <Check className="h-3 w-3 text-white" />
                    </div>
                  )}
                  {selectedOption && option.correct && selectedOption !== option.value && (
                    <div className="h-5 w-5 rounded-full bg-green-500 flex items-center justify-center">
                      <Check className="h-3 w-3 text-white" />
                    </div>
                  )}
                </div>
              ))}
              
              {feedback && (
                <div className={`mt-4 p-4 rounded-lg ${feedback.isCorrect ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>
                  <p className={`text-sm ${feedback.isCorrect ? 'text-green-700' : 'text-red-700'}`}>
                    {feedback.message}
                  </p>
                </div>
              )}
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button
                variant="ghost"
                onClick={handlePrevious}
                disabled={currentQuestion === 0}
                className={currentQuestion === 0 ? 'invisible' : ''}
              >
                <ChevronLeft className="mr-2 h-4 w-4" /> Previous
              </Button>
              <Button 
                onClick={handleNext}
                disabled={!selectedOption}
              >
                {currentQuestion < quizQuestions.length - 1 ? (
                  <>
                    Next <ChevronRight className="ml-2 h-4 w-4" />
                  </>
                ) : (
                  <>
                    Finish <Check className="ml-2 h-4 w-4" />
                  </>
                )}
              </Button>
            </CardFooter>
          </Card>
        ) : (
          <Card>
            <CardHeader>
              <CardTitle className="text-xl text-center">Quiz Complete!</CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <div className="rounded-full bg-primary/20 p-6 inline-flex">
                <Award className="h-12 w-12 text-primary" />
              </div>
              <h2 className="text-xl font-bold mt-4">Your Score: {score}%</h2>
              <p className="text-muted-foreground mt-2">
                You got {correctAnswers} out of {quizQuestions.length} questions correct.
              </p>
              
              <div className="mt-6 p-4 rounded-lg border bg-muted/30">
                <h3 className="font-medium mb-2">Knowledge Insights</h3>
                <p className="text-sm text-muted-foreground">
                  {score >= 80 ? 
                    "Excellent! You have great knowledge about pet care." :
                    score >= 60 ?
                      "Good job! You have solid pet care knowledge with some room to learn more." :
                      "You have the basics down, but there's more to learn about proper pet care."
                  }
                </p>
              </div>
            </CardContent>
            <CardFooter className="flex flex-col gap-2">
              <Button onClick={startNewQuiz} className="w-full" variant="outline">
                <RefreshCw className="mr-2 h-4 w-4" /> Take Another Quiz
              </Button>
              <Button onClick={handleSubmit} className="w-full">
                Return Home <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </CardFooter>
          </Card>
        )}
      </div>
    </div>
  );
};

export default QuizPage;
